generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @map("user_id")
  type                     String
  provider                 String
  providerAccountId        String  @map("provider_account_id")
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  expires      DateTime
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id       String     @id @default(cuid())
  name     String?
  email    String?    @unique
  image    String?
  accounts Account[]
  sessions Session[]
  Progress Progress[]
  Course   Course[]
}

model Course {
  id        String     @id @default(cuid())
  title     String
  modules   Module[]
  createdAt DateTime   @default(now())
  Lesson    Lesson[]
  published Boolean    @default(false)
  author    User       @relation(fields: [userId], references: [id])
  userId    String
  Progress  Progress[]
}

model Module {
  id       String     @id @default(cuid())
  title    String
  lessons  Lesson[]
  courseId String
  course   Course     @relation(fields: [courseId], references: [id])
  Progress Progress[]
}

model Lesson {
  id        String      @id @default(cuid())
  title     String
  content   Paragraph[]
  courseId  String
  moduleId  String
  module    Module      @relation(fields: [moduleId], references: [id])
  course    Course      @relation(fields: [courseId], references: [id])
  createdAt DateTime    @default(now())
  Progress  Progress[]
  Quiz      Quiz[]
}

enum ContentType {
  Text
  Image
  Code
}

model Paragraph {
  id       String      @id @default(cuid())
  type     ContentType
  content  String
  Lesson   Lesson?     @relation(fields: [lessonId], references: [id])
  lessonId String?
}

model Progress {
  id        String   @id @default(cuid())
  courseId  String
  moduleId  String
  lessonId  String
  studentId String
  completed Boolean
  updatedAt DateTime @updatedAt
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  module    Module   @relation(fields: [moduleId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  student   User     @relation(fields: [studentId], references: [id])
}

model Quiz {
  id        String     @id @default(cuid())
  questions Question[]
  lessonId  String
  lesson    Lesson     @relation(fields: [lessonId], references: [id])
}

model Question {
  id       String    @id @default(cuid())
  text     String
  variants Variant[]
  answer   String
  Quiz     Quiz?     @relation(fields: [quizId], references: [id])
  quizId   String?
}

model Variant {
  id          String    @id @default(cuid())
  text        String
  description String
  Question    Question? @relation(fields: [questionId], references: [id])
  questionId  String?
}
